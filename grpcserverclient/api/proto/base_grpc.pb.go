// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/proto/base.proto

package randomNumbers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RandomNumbers_GenerateRequest_FullMethodName = "/api.RandomNumbers/GenerateRequest"
)

// RandomNumbersClient is the client API for RandomNumbers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomNumbersClient interface {
	GenerateRequest(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*GenResponse, error)
}

type randomNumbersClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomNumbersClient(cc grpc.ClientConnInterface) RandomNumbersClient {
	return &randomNumbersClient{cc}
}

func (c *randomNumbersClient) GenerateRequest(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, RandomNumbers_GenerateRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomNumbersServer is the server API for RandomNumbers service.
// All implementations must embed UnimplementedRandomNumbersServer
// for forward compatibility
type RandomNumbersServer interface {
	GenerateRequest(context.Context, *GenRequest) (*GenResponse, error)
	mustEmbedUnimplementedRandomNumbersServer()
}

// UnimplementedRandomNumbersServer must be embedded to have forward compatible implementations.
type UnimplementedRandomNumbersServer struct {
}

func (UnimplementedRandomNumbersServer) GenerateRequest(context.Context, *GenRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRequest not implemented")
}
func (UnimplementedRandomNumbersServer) mustEmbedUnimplementedRandomNumbersServer() {}

// UnsafeRandomNumbersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomNumbersServer will
// result in compilation errors.
type UnsafeRandomNumbersServer interface {
	mustEmbedUnimplementedRandomNumbersServer()
}

func RegisterRandomNumbersServer(s grpc.ServiceRegistrar, srv RandomNumbersServer) {
	s.RegisterService(&RandomNumbers_ServiceDesc, srv)
}

func _RandomNumbers_GenerateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomNumbersServer).GenerateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RandomNumbers_GenerateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomNumbersServer).GenerateRequest(ctx, req.(*GenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RandomNumbers_ServiceDesc is the grpc.ServiceDesc for RandomNumbers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomNumbers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RandomNumbers",
	HandlerType: (*RandomNumbersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRequest",
			Handler:    _RandomNumbers_GenerateRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/base.proto",
}
